import { Menu } from 'lucide-react'
import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import Sidebar from './Sidebar'
import ModalLogin from './ui/ModalLogin'
import { useAuth } from '../helpers/context/AuthContext'

interface LayoutProps {
	children: React.ReactNode
}

export const Layout: React.FC<LayoutProps> = ({ children }) => {
	const [isSidebarOpen, setIsSidebarOpen] = useState(false)
	const [hasCheckedAuth, setHasCheckedAuth] = useState<boolean>(false)
	const location = useLocation()
	const navigate = useNavigate()
	const { isLoginModalOpen, setIsLoginModalOpen, isAuthenticated } = useAuth()

	// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ auth-failure
	useEffect(() => {
		const handleAuthFailure = () => {
			console.log('üîπ Auth failure event received, opening modal...')
			setIsLoginModalOpen(true)
		}

		window.addEventListener('auth-failure', handleAuthFailure)
		return () => {
			window.removeEventListener('auth-failure', handleAuthFailure)
		}
	}, [setIsLoginModalOpen])

	useEffect(() => {
		if (!hasCheckedAuth && !isAuthenticated) {
			setIsLoginModalOpen(true)
			setHasCheckedAuth(true)
		}
	}, [hasCheckedAuth, isAuthenticated, setIsLoginModalOpen])

	const handleProfileClick = () => {
		if (isAuthenticated) {
			navigate('/profile')
		} else {
			setIsLoginModalOpen(true)
		}
	}

	const routeHome = () => {
		if (window.history.length > 2) {
			navigate(-1)
		} else {
			navigate('/')
		}
	}

	const getPageTitle = () => {
		const path = location.pathname
		if (path === '/') return '–ì–ª–∞–≤–Ω–∞—è'
		if (path.startsWith('/devices/list')) return '–°–ø–∏—Å–æ–∫ –∞–ø–ø–∞—Ä–∞—Ç–æ–≤'
		if (path.startsWith('/devices/details')) return '–î–µ—Ç–∞–ª—å–Ω–æ'
		if (path.startsWith('/devices/settings')) return '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
		if (path.startsWith('/devices/regulations')) return '–†–µ–≥–ª–∞–º–µ–Ω—Ç'
		if (path.startsWith('/devices/replacing')) return '–ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π'
		if (path.startsWith('/devices/refill')) return '–ó–∞–ø—Ä–∞–≤–∫–∞'
		if (path.startsWith('/devices/config')) return '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'
		if (path.startsWith('/devices/tarif')) return '–¢–∞—Ä–∏—Ñ'
		if (path.startsWith('/stats/sales')) return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂'
		if (path.startsWith('/stats/daily')) return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏'
		if (path.startsWith('/stats/by-days')) return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º'
		if (path.startsWith('/stats/devices')) return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º'
		if (path.startsWith('/stats/collection')) return '–ò–Ω–∫–∞—Å–∞—Ü–∏—è'
		if (path.startsWith('/stats/by-liters')) return '–ü–æ –ª–∏—Ç—Ä–∞–∂—É'
		if (path.startsWith('/stats/yearly')) return '–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç'
		if (path.startsWith('/cards/list')) return '–°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç'
		if (path.startsWith('/cards/connections')) return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç'
		if (path.startsWith('/maintenance/history')) return '–ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
		if (path === '/profile') return '–ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
		return '–°—Ç—Ä–∞–Ω–∏—Ü–∞'
	}

	return (
		<div className='flex min-h-screen bg-gray-100 relative'>
			{isSidebarOpen && (
				<div
					className='fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden'
					onClick={() => setIsSidebarOpen(false)}
				/>
			)}
			<div
				className={`
          fixed lg:static inset-y-0 left-0 transform 
          ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}
          lg:translate-x-0 transition-transform duration-200 ease-in-out
          z-50 lg:z-0
        `}
			>
				<Sidebar onClose={() => setIsSidebarOpen(false)} />
			</div>
			<main className='flex-1 w-full'>
				<div className='bg-blue-500 text-white py-2 px-4 flex justify-between items-center sticky top-0 z-40'>
					<div className='flex items-center'>
						<button
							className='lg:hidden mr-4 hover:bg-blue-600 p-1 rounded'
							onClick={() => setIsSidebarOpen(true)}
						>
							<Menu size={24} />
						</button>
						<button className='mr-4' onClick={() => routeHome()}>
							‚Üê
						</button>
						<h1 className='text-lg'>{getPageTitle()}</h1>
					</div>
					<div className='flex items-center space-x-4'>
						<button onClick={handleProfileClick}>üë§</button>
					</div>
					<ModalLogin
						isOpen={isLoginModalOpen}
						onClose={() => setIsLoginModalOpen(false)}
					/>
				</div>
				{children}
			</main>
		</div>
	)
}
